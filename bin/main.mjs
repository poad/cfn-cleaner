import * as fs from 'fs';
import readline from 'readline';
import path from 'path';
import { CloudFormationClient, DeleteStackCommand, ListStacksCommand, StackStatus, waitUntilStackDeleteComplete, } from '@aws-sdk/client-cloudformation';
import arg from 'arg';
import chalkTemplate from 'chalk-template';
import log4js from 'log4js';
log4js.configure({
    appenders: {
        out: {
            type: 'stdout',
            layout: {
                type: 'pattern',
                pattern: '%m%n',
            },
        },
    },
    categories: { default: { appenders: ['out'], level: 'info' } },
});
const logger = log4js.getLogger();
const rl = readline.createInterface(process.stdin, process.stdout);
const question = (message) => new Promise((resolve) => {
    rl.question(message, (answer) => {
        resolve(answer);
        rl.close();
    });
});
const confirm = async () => {
    const answer = await question('Remove Stacks? [y/n] ');
    const lowerAnswer = answer.toLowerCase();
    if (lowerAnswer === 'y' || lowerAnswer === 'yes') {
        return true;
    }
    if (lowerAnswer === 'n' || lowerAnswer === 'no') {
        return false;
    }
    return confirm();
};
const listStacks = async (client, nextToeken = undefined) => {
    const response = await client.send(new ListStacksCommand({
        StackStatusFilter: [
            StackStatus.CREATE_COMPLETE,
            StackStatus.CREATE_FAILED,
            // StackStatus.CREATE_IN_PROGRESS,
            StackStatus.DELETE_FAILED,
            // StackStatus.DELETE_IN_PROGRESS,
            StackStatus.IMPORT_COMPLETE,
            StackStatus.IMPORT_IN_PROGRESS,
            StackStatus.IMPORT_ROLLBACK_COMPLETE,
            StackStatus.IMPORT_ROLLBACK_FAILED,
            // StackStatus.IMPORT_ROLLBACK_IN_PROGRESS,
            // StackStatus.REVIEW_IN_PROGRESS,
            StackStatus.ROLLBACK_COMPLETE,
            StackStatus.ROLLBACK_FAILED,
            // StackStatus.ROLLBACK_IN_PROGRESS,
            StackStatus.UPDATE_COMPLETE,
            // StackStatus.UPDATE_COMPLETE_CLEANUP_IN_PROGRESS,
            StackStatus.UPDATE_FAILED,
            // StackStatus.UPDATE_IN_PROGRESS,
            StackStatus.UPDATE_ROLLBACK_COMPLETE,
            // StackStatus.UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS,
            StackStatus.UPDATE_ROLLBACK_FAILED,
            // StackStatus.UPDATE_ROLLBACK_IN_PROGRESS,
        ],
        NextToken: nextToeken,
    }));
    const summaries = response.StackSummaries === undefined ? [] : response.StackSummaries;
    if (response.NextToken) {
        return summaries.concat(await listStacks(client, response.NextToken));
    }
    return summaries;
};
const argDef = {
    '--help': {
        type: Boolean,
        alias: '-h',
    },
    '--version': {
        type: Boolean,
        alias: '-v',
    },
    '--prefix': {
        type: String,
        alias: '-p',
    },
};
const options = Object.keys(argDef)
    .map((key) => {
    const target = {};
    target[key] = argDef[key].type;
    return target;
})
    .reduce((cur, acc) => Object.assign(acc, cur));
const aliases = Object.keys(argDef)
    .map((key) => {
    const target = {};
    target[argDef[key].alias] = key;
    return target;
})
    .reduce((cur, acc) => Object.assign(acc, cur));
const argConfig = {
    // Types
    ...options,
    // Aliases
    ...aliases,
};
const sleep = async (time) => new Promise((resolve) => {
    setTimeout(() => {
        resolve();
    }, time);
});
function arrayChunk([...array], size = 1) {
    return array.reduce((acc, __value, index) => (index % size ? acc : [...acc, array.slice(index, index + size)]), []);
}
try {
    const args = arg(argConfig);
    const packageJson = JSON.parse(Buffer.from(fs.readFileSync(path.resolve('package.json'), { flag: 'r' })).toString());
    const helpMessage = chalkTemplate `
  {bold USAGE}
      {dim $} {bold ${Object.keys(packageJson.bin).pop()}} [--help] --string {underline some-arg}
  {bold OPTIONS}
      --help                 Shows this help message
      --version              Print version of this module
      --prefix {underline prefix-of-stack-name}  the prefix for name of CloudFormation Stack
`;
    if (args['--help'] !== undefined) {
        logger.error(helpMessage);
        process.exit(0);
    }
    if (args['--version'] !== undefined) {
        logger.info(packageJson.version);
        process.exit(0);
    }
    const prefix = args['--prefix'];
    logger.info(`Prefix: ${prefix}`);
    const client = new CloudFormationClient({});
    const stacks = (await listStacks(client))
        .filter((stack) => (prefix ? stack.StackName?.startsWith(prefix) : true));
    logger.info(`Remove stacks\n${stacks
        .map((stack) => `\t${stack.StackName}`)
        .reduce((acc, cur) => `${acc}\n${cur}`)}`);
    if (await confirm()) {
        const stackNames = stacks
            .map((stack) => stack.StackName)
            .filter((stackNames) => stackNames !== undefined);
        const resps = arrayChunk(stackNames, 10)
            .flatMap((stackNames) => {
            const resps = stackNames.map(async (StackName) => {
                logger.debug(`stack: ${StackName}`);
                return sleep(3000).then(async () => {
                    const resp = await client.send(new DeleteStackCommand({
                        StackName,
                    }))
                        .catch((e) => {
                        logger.error(e);
                    });
                    await waitUntilStackDeleteComplete({ client, maxWaitTime: 60 * 3 }, { StackName });
                    return resp;
                });
            });
            return resps;
        });
        Promise.all(resps).then(() => logger.info('done'));
    }
    else {
        logger.info('canceled');
    }
}
catch (e) {
    // logger.error(e);
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5tanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWFpbi5tdHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsV0FBVyxFQUVYLDRCQUE0QixHQUM3QixNQUFNLGdDQUFnQyxDQUFDO0FBRXhDLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUN0QixPQUFPLGFBQWEsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNmLFNBQVMsRUFBRTtRQUNULEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxRQUFRO1lBQ2QsTUFBTSxFQUFFO2dCQUNOLElBQUksRUFBRSxTQUFTO2dCQUNmLE9BQU8sRUFBRSxNQUFNO2FBQ2hCO1NBQ0Y7S0FDRjtJQUNELFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtDQUMvRCxDQUFDLENBQUM7QUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7QUFFbEMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUVuRSxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWUsRUFBbUIsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDN0UsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFN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